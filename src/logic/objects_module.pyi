from typing import Any, List, Tuple, Union
import enum

class SurfaceType(enum.Enum):
    FLOOR: int
    CEILING: int
    WALL_FRONT: int
    WALL_BACK: int
    WALL_LEFT: int
    WALL_RIGHT: int

class Vector3:
    x: float
    y: float
    z: float
    def __init__(self, x: float = 0.0, y: float = 0.0, z: float = 0.0) -> None: ...

class Color:
    r: int
    g: int
    b: int
    a: int
    def __init__(self, r: int, g: int, b: int, a: int = 255) -> None: ...

class Object:
    @property
    def id(self) -> int: ...
    @property
    def position(self) -> Vector3: ...
    @position.setter
    def position(self, value: Vector3) -> None: ...
    def get_type(self) -> str: ...
    def calculate_distance(self, other: Object) -> float: ...
    def check_collision(self, other: Object) -> bool: ...

class Cube(Object):
    def __init__(self, pos: Vector3, size: Vector3, color: Color = ...) -> None: ...
    @property
    def size(self) -> Vector3: ...
    @size.setter
    def size(self, value: Vector3) -> None: ...

class Sphere(Object):
    def __init__(self, pos: Vector3, radius: float, color: Color = ...) -> None: ...
    @property
    def radius(self) -> float: ...
    @radius.setter
    def radius(self, value: float) -> None: ...

class Wall:
    def __init__(self, type: SurfaceType, normal: Vector3, distance: float, vertices: List[Vector3]) -> None: ...
    def get_type(self) -> SurfaceType: ...
    def get_normal(self) -> Vector3: ...
    def get_vertices(self) -> List[Vector3]: ...
    def get_center(self) -> Vector3: ...
    def calc_distance_to_point(self, point: Vector3) -> float: ...

class Room:
    def __init__(self, origin: Vector3, dimensions: Vector3, wireframe_color: Color = ...) -> None: ...
    def get_center(self) -> Vector3: ...
    def get_wf_vertices(self) -> List[Vector3]: ...
    def get_origin(self) -> Vector3: ...
    def get_dimensions(self) -> Vector3: ...
    def get_wf_color(self) -> Color: ...
    def get_walls(self) -> List[Wall]: ...
    def get_wall(self, type: SurfaceType) -> Wall: ...
    def get_near_distance(self, point: Vector3) -> float: ...
    def is_inside(self, point: Vector3) -> bool: ...

# Константы
GRAY: Color
RED: Color
GREEN: Color
ORANGE: Color

# Функции
def calculate_distance_between(obj1: Object, obj2: Object) -> float: ...
def check_collision_between(obj1: Object, obj2: Object) -> bool: ...
